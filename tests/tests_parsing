TEST PARSING     = -> OK   / -> FAUX        * -> CORRIGE

problemes:
- "" ou '' entourees d'espaces compte comme un argument \0       ----semble fix
- "" ou '' coller a une chaine = ignorer (compter les espaces apres)
- "text" ou 'text' doit compter les espaces apres
- $VAR "" ou '' met fin au nom de la VAR (echo $"" different de echo $)

1. ec""ho test 

2. ""echo test 

3. echo"" test  

4. echo "" test 

5. echo $USER

6. echo $USE""R 

7. echo ""$USER ; echo ''$USER

8. echo "$"USER 

9. echo  $""USER OK    / ]         - $VAR "" ou '' met fin au nom de la VAR (echo $"" different de echo $) - OK


10. ec''ho test OK   = ca marche OK

11. ''echo test OK     = ca marche OK

12. echo'' test OK     / ]            - "" ou '' coller a une chaine = ignorer (compter les espaces apres)- ca marche OK

13. echo '' test OK   = ca marche OK

14. echo $USER 	OK       = ca marche OK

15. echo $USE''R OK   = ca marche OK

16. echo ''$USER OK   = ca marche OK

17. echo '$'USER OK   = ]            - $VAR "" ou '' met fin au nom de la VAR (echo $"" different de echo $) - ca marche avec echo '$'USER mais pas avec echo $'' (ou "") OK


18. echo  $''USER  OK  / ]            - $VAR "" ou '' met fin au nom de la VAR (echo $"" different de echo $) - OK

19. echo $      OK      = ]            - $VAR "" ou '' met fin au nom de la VAR (echo $"" different de echo $) = echo $ ca marche OK

20. echo $""   OK     / ]            - $VAR "" ou '' met fin au nom de la VAR (echo $"" different de echo $) - OK

21. echo "" "" "" test OK / ]        - "" ou '' entourees d'espaces compte comme un argument \0 - ca marche OK

22. echo """""" test OK   / ]        - "" ou '' entourees d'espaces compte comme un argument \0 - ca marche OK

23. ls ""      OK      /      ]        - "" ou '' entourees d'espaces compte comme un argument \0 - ca marche OK

24. echo $USER"" ''   OK     / ] - ca marche OK

25. ls '"     OK       = "le notre : Error: There is not second single quotes, le bash attand qch, comme heredoc

26. ls "'     OK       = "meme chose que 25.

27. ls "    "  OK      = ca marche OK

28. ls "  ' "   OK     = ca marche OK

29. "ls"    OK        = ca marche OK

30. l"s"    OK        = ca marche OK

31. ls"" -la   OK     / ]         - "" ou '' coller a une chaine = ignorer (compter les espaces apres) ca marche OK

32. ls "" -la  OK      / ]         - "" ou '' entourees d'espaces compte comme un argument \0     ca marche OK'

33. ls """"-la  OK      = ca marche OK

34. ls ""-la   OK     = ca marche OK

35. echo test""test   OK     = ca marche OK

36. echo test"" test OK   / ]        - "" ou '' coller a une chaine = ignorer (compter les espaces apres) - ca marche OK

37. echo test ""test OK   = ca marche OK
38. echo test "'"test OK   = ca marche OK
39. echo $$$USER   OK     = bash le voit comm var $$ et $USER
40. echo $$USER    OK        = le meme probleme que 39.
41. echo $USER$USER   OK     = ca marche OK
42. echo $USER""$USER  OK  = ca marche OK
43. echo $USER" "$USER  OK  = ca marche OK

44. echo "|" ls     OK       / ]        - marche, mais mit pas espace apre | J'ai trouve erreur (make_str_double_quote - fl_space ajouer pour y-1.)'

45. echo test$1test   OK
46. echo test$var_qui_nexiste_pas  OK
47. echo "$USER>>" OK
48. echo "$USER11111fjfjfjf" - dois rien afficher parce que 11 etc envisage comme nom de var OK
49. echo $\"echo - ne marche pas, renvoi erreuer -2 mais c'est normale'

50. echo "test$<test" OK

51. echo test$<test - OK
52. echo "test$-r" OK
53. echo "test$-?" OK
54. echo $-1$USER OK
55. echo $1 OK
56. echo "$1" OK
57. echo  $"USER" OK
58. echo  $'USER' OK
59. echo "$NULL" test OK
60. echo '"abc"' OK
61. echo $NULL test OK
62. echo test |cat  - probleme de | colle OK
63. echo koala ||| cat - la source de probleme est meme que 62. OK


64. >minishell export A=1 B=2 C=3 D=4 E=5 F=6 G=7 H=8    OK
>minishell echo "$A'$B"'$C"$D'$E'"$F"'"'$G'$H"
1'2$C   5"$F"'7'8

'65. echo '  "abc" '   OK

66. echo " $ " | cat -e

67. echo $:$= | cat -e
68. export FOO=' " '
69. echo " $FOO " | cat -e


signal(SIGINT, SIG_IGN);
			signal(SIGQUIT, SIG_IGN);
			signal(SIGSEGV, SIG_IGN);
			//SIGBUS
			//SIGABRT
			//SIGTRAP
			// set_signals2();

else if (str[*i] && ((str[*i] == '<') && (str[*i] == '>')))
		{
			while ((str[*i] == '<') && (str[*i] == '>'))
		}
